"use client";

import { useState } from "react";

export type DecidedItem = {
  title?: string;
  role?: string;
  period?: string;
  date?: string;
  release?: string;
  note?: string;
};

export type AwaitingReleaseItem = {
  title?: string;
  role?: string;
  platform?: string;
  expectedRelease?: string;
  date?: string;
  note?: string;
};

export type Auditions = {
  passed?: string[];
  inProgress?: string[];
  rejected?: string[];
};

export type UITalent = {
  id: string;
  name?: string;
  reading?: string;
  note?: string;
  decided?: DecidedItem[];
  auditions?: Auditions;
  lessons?: string[];
  snsProgress?: string[];
  recentUpdates?: string[];
  awaitingRelease?: AwaitingReleaseItem[];
};

export type TalentReportProps = { talents: UITalent[] };

export default function TalentReport({ talents }: TalentReportProps) {
  const [active, setActive] = useState<string>(talents[0]?.id ?? "");

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6 min-h-screen bg-neutral-50 text-slate-900">
      {/* Header */}
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold">„Çø„É¨„É≥„ÉàËøëÊ≥ÅÂ†±Âëä</h1>
        <p className="text-slate-600">{talents.length}Âêç„ÅÆ„Çø„É¨„É≥„ÉàÊ¥ªÂãïÁä∂Ê≥Å„Åæ„Å®„ÇÅ</p>
      </div>

      {/* Tabs header */}
      <div className="w-full grid grid-cols-2 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2">
        {talents.map((t) => (
          <button
            key={t.id}
            onClick={() => setActive(t.id)}
            className={`text-xs rounded border px-2 py-1 transition ${
              active === t.id
                ? "bg-blue-600 text-white border-blue-600"
                : "bg-white hover:bg-gray-100 text-slate-800 border-gray-200"
            }`}
          >
            {(t.name || t.id).toString().split(" ")[0]}
          </button>
        ))}
      </div>

      {/* Active content */}
      {talents.map((t) => (
        <div key={t.id} hidden={active !== t.id} className="space-y-6">
          {/* Basic card */}
          <div className="rounded-lg border bg-white">
            <div className="p-4 border-b">
              <div className="text-lg font-semibold flex items-center gap-2">
                <span>‚≠ê</span>
                {t.name || t.id}
                {t.reading ? (
                  <span className="text-sm text-gray-500">Ôºà{t.reading}Ôºâ</span>
                ) : null}
              </div>
              {t.note ? <p className="text-sm text-slate-600 mt-1">{t.note}</p> : null}
            </div>
          </div>

          {/* Recent updates */}
          {!!t.recentUpdates?.length && (
            <Card title="ËøëÊ≥ÅÂ†±Âëä" badge={t.recentUpdates.length} icon="üü†">
              <ul className="space-y-2">
                {t.recentUpdates.map((u, i) => (
                  <li key={i} className="flex items-start gap-2">
                    <span className="w-2 h-2 bg-orange-500 rounded-full mt-2 inline-block" />
                    <span className="text-sm">{String(u)}</span>
                  </li>
                ))}
              </ul>
            </Card>
          )}

          <div className={`grid gap-6 ${t.id === "taniguchi" ? "" : "md:grid-cols-2"}`}>
            {/* Decided (hide for taniguchi) */}
            {t.id !== "taniguchi" && !!t.decided?.length && (
              <Card title="Ê±∫ÂÆöÊ°à‰ª∂" badge={t.decided.length} icon="üì∑" badgeTone="secondary">
                <ul className="space-y-3">
                  {t.decided.map((d: DecidedItem, i: number) => (
                    <li key={i} className="border-l-4 border-green-500 pl-4 space-y-1">
                      <div className="font-semibold text-sm">{d.title}</div>
                      <Meta label="ÂΩπÂêç" value={d.role} />
                      <Meta label="ÊúüÈñì" value={d.period} />
                      <Meta label="Êó•Á®ã" value={d.date} />
                      <Meta label="ÂÖ¨Èñã" value={d.release} />
                      <Meta label="ÂÇôËÄÉ" value={d.note} />
                    </li>
                  ))}
                </ul>
              </Card>
            )}

            {/* Awaiting release */}
            {!!t.awaitingRelease?.length && (
              <Card title="ÂÖ¨ÈñãÂæÖ„Å°" badge={t.awaitingRelease.length} icon="‚è≥" badgeTone="secondary">
                <ul className="space-y-3">
                  {t.awaitingRelease.map((a: AwaitingReleaseItem, i: number) => (
                    <li key={i} className="border-l-4 border-purple-500 pl-4 space-y-1">
                      <div className="font-semibold text-sm">{a.title}</div>
                      <Meta label="ÂΩπÂêç" value={a.role} />
                      <Meta label="ÈÖç‰ø°" value={a.platform} />
                      <Meta label="ÂÖ¨Èñã‰∫àÂÆö" value={a.expectedRelease} />
                      <Meta label="Êó•‰ªò" value={a.date} />
                      <Meta label="ÂÇôËÄÉ" value={a.note} />
                    </li>
                  ))}
                </ul>
              </Card>
            )}

            {/* Auditions */}
            <Card title="„Ç™„Éº„Éá„Ç£„Ç∑„Éß„É≥Áä∂Ê≥Å" icon="üë•">
              <div className="divide-y">
                {!!t.auditions?.passed?.length && (
                  <AccordionItem title={`ÂêàÊ†º (${t.auditions.passed.length})`}>
                    <ul className="space-y-1">
                      {t.auditions.passed.map((x: string, i: number) => (
                        <li key={i} className="text-sm text-blue-700">‚Ä¢ {String(x)}</li>
                      ))}
                    </ul>
                  </AccordionItem>
                )}

                {!!t.auditions?.inProgress?.length && (
                  <AccordionItem title={`ÈÄ≤Ë°å‰∏≠ (${t.auditions.inProgress.length})`}>
                    <ul className="space-y-1">
                      {t.auditions.inProgress.map((x: string, i: number) => (
                        <li key={i} className="text-sm text-yellow-700">‚Ä¢ {String(x)}</li>
                      ))}
                    </ul>
                  </AccordionItem>
                )}

                {!!t.auditions?.rejected?.length && (
                  <AccordionItem title={`Ë¶ãÈÄÅ„Çä„ÉªËæûÈÄÄ (${t.auditions.rejected.length})`}>
                    <ul className="space-y-1">
                      {t.auditions.rejected.map((x: string, i: number) => (
                        <li key={i} className="text-sm text-red-700">‚Ä¢ {String(x)}</li>
                      ))}
                    </ul>
                  </AccordionItem>
                )}
              </div>
            </Card>
          </div>

          {/* Lessons */}
          {!!t.lessons?.length && (
            <Card title="„É¨„ÉÉ„Çπ„É≥„Éª„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó" icon="üé§">
              <ul className="space-y-2">
                {t.lessons.map((l: string, i: number) => (
                  <li key={i} className="flex items-start gap-2">
                    <span className="w-2 h-2 bg-purple-500 rounded-full mt-2 inline-block" />
                    <span className="text-sm">{String(l)}</span>
                  </li>
                ))}
              </ul>
            </Card>
          )}

          {/* SNS */}
          {!!t.snsProgress?.length && (
            <Card title="SNSÈÄ≤Êçó" icon="üë•">
              <ul className="space-y-2">
                {t.snsProgress.map((s: string, i: number) => (
                  <li key={i} className="flex items-start gap-2">
                    <span className="w-2 h-2 bg-pink-500 rounded-full mt-2 inline-block" />
                    <span className="text-sm">{String(s)}</span>
                  </li>
                ))}
              </ul>
            </Card>
          )}

          {/* Summary */}
          <div className="rounded-lg border bg-white">
            <div className="p-4 border-b">
              <div className="font-semibold">„Çµ„Éû„É™„Éº</div>
            </div>
            <div className="p-4 grid grid-cols-2 md:grid-cols-4 gap-4">
              <Summary label="Ê±∫ÂÆöÊ°à‰ª∂" value={t.decided?.length || 0} color="text-green-600" />
              <Summary label="ÈÄ≤Ë°å‰∏≠" value={t.auditions?.inProgress?.length || 0} color="text-yellow-600" />
              <Summary label="„Ç™„Éº„Éá„Ç£„Ç∑„Éß„É≥ÂêàÊ†º" value={t.auditions?.passed?.length || 0} color="text-blue-600" />
              <Summary label="ÂÖ¨ÈñãÂæÖ„Å°" value={t.awaitingRelease?.length || 0} color="text-purple-600" />
            </div>
          </div>
        </div>
      ))}
    </div>
  );
}

function Summary({ label, value, color }: { label: string; value: number; color: string }) {
  return (
    <div className="text-center">
      <div className={`text-2xl font-bold ${color}`}>{value}</div>
      <div className="text-sm text-gray-500">{label}</div>
    </div>
  );
}

function Card({ title, children, badge, icon, badgeTone = "default" }: { title: string; children: React.ReactNode; badge?: number; icon?: string; badgeTone?: "default" | "secondary" }) {
  return (
    <div className="rounded-lg border bg-white">
      <div className="p-4 border-b flex items-center gap-2">
        <span className="text-base">{icon}</span>
        <div className="font-semibold">{title}</div>
        {typeof badge === "number" ? (
          <span
            className={`ml-2 text-xs rounded px-2 py-0.5 border ${
              badgeTone === "secondary" ? "bg-gray-100" : "bg-white"
            }`}
          >
            {badge}
          </span>
        ) : null}
      </div>
      <div className="p-4">{children}</div>
    </div>
  );
}

function Meta({ label, value }: { label: string; value?: string | number | boolean }) {
  if (!value) return null;
  return <div className="text-xs text-gray-600">{label}: {String(value)}</div>;
}

function AccordionItem({ title, children }: { title: string; children: React.ReactNode }) {
  const [open, setOpen] = useState(false);
  return (
    <div>
      <button
        onClick={() => setOpen((v) => !v)}
        className="w-full text-left py-2 flex items-center justify-between"
      >
        <span className="text-sm font-medium">{title}</span>
        <span className="text-xs text-gray-500">{open ? "‚ñ≤" : "‚ñº"}</span>
      </button>
      {open ? <div className="pt-2 pb-3">{children}</div> : null}
    </div>
  );
}
